activity<-read.csv("activity.csv")
#       head(activity)
#       str(activity$steps)
```
## What is mean total number of steps taken per day?
```{r, echo=TRUE}
#       install.packages("ggplot2")
library("ggplot2")
meansteps<-aggregate(activity$steps,list(activity$date),sum)
#       head(meansteps)
#       Plot
a<-ggplot(meansteps,aes(meansteps$x))   +
geom_histogram(na.rm=TRUE)
a
#       Mean and Media
mean(meansteps$x,na.rm=TRUE)
median(meansteps$x,na.rm=TRUE)
```
## What is the average daily activity pattern?
```{r, echo=TRUE}
meanint<-aggregate(activity$steps,list(activity$interval),mean,na.rm=TRUE)
#       head(meanint)
b<-ggplot(meanint,aes(x=meanint$Group.1,y=meanint$x))   +
geom_line()
b
#       Max Value
meanint[meanint$x==max(meanint$x),1]
```
## Imputing missing values
#   Strategy used replaces NAs with the average for that time interval
#   across observed period
```{r, echo=TRUE}
#       Count NAs
sum(is.na(activity$steps))
#       Replace NA Values with average for that time
install.packages("plyr")
library("plyr")
activityNew<-activity
NAs<-is.na(activityNew$steps)
avg<-tapply(activityNew$steps, activityNew$interval,mean,
na.rm=TRUE, simplify = TRUE)
activityNew$steps[NAs]<-avg[as.character(activityNew$interval[NAs])]
#       Double check NAs removed
sum(is.na(activityNew$steps))
#       Histogram
meanstepsNew<-aggregate(activityNew$steps,list(activity$date),sum)
c<-ggplot(meanstepsNew,aes(meanstepsNew$x))   +
geom_histogram(na.rm=TRUE)
c
#       Mean and Media
mean(meanstepsNew$x,na.rm=TRUE)
median(meanstepsNew$x,na.rm=TRUE)
#       mean remains unchanged, median now matches mean
#       Total number of steps goes up?
sum(activityNew$steps)-sum(activity$steps, na.rm=TRUE)
```
## Are there differences in activity patterns between weekdays and weekends?
getwd()
setwd("~/R/Rep Research")
setwd("~/R")
getwd()
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
setwd("~/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
getwd()
setwd(.)
setwd("."")
setwd(".")
setwd(".")
getwd()
setwd("~/R/Coursera Data Science/Rep Research/")
getwd()
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
getwd()
activity<-read.csv("activity.csv")
```{r, echo=TRUE}
#       install.packages("ggplot2")
library("ggplot2")
meansteps<-aggregate(activity$steps,list(activity$date),sum)
#       head(meansteps)
#       Plot
a<-ggplot(meansteps,aes(meansteps$x))   +
geom_histogram(na.rm=TRUE)
a
#       Mean and Media
mean(meansteps$x,na.rm=TRUE)
median(meansteps$x,na.rm=TRUE)
```
## What is the average daily activity pattern?
```{r, echo=TRUE}
meanint<-aggregate(activity$steps,list(activity$interval),mean,na.rm=TRUE)
#       head(meanint)
b<-ggplot(meanint,aes(x=meanint$Group.1,y=meanint$x))   +
geom_line()
b
#       Max Value
meanint[meanint$x==max(meanint$x),1]
```
## Imputing missing values
#   Strategy used replaces NAs with the average for that time interval
#   across observed period
```{r, echo=TRUE}
#       Count NAs
sum(is.na(activity$steps))
#       Replace NA Values with average for that time
install.packages("plyr")
library("plyr")
activityNew<-activity
NAs<-is.na(activityNew$steps)
avg<-tapply(activityNew$steps, activityNew$interval,mean,
na.rm=TRUE, simplify = TRUE)
activityNew$steps[NAs]<-avg[as.character(activityNew$interval[NAs])]
#       Double check NAs removed
sum(is.na(activityNew$steps))
#       Histogram
meanstepsNew<-aggregate(activityNew$steps,list(activity$date),sum)
c<-ggplot(meanstepsNew,aes(meanstepsNew$x))   +
geom_histogram(na.rm=TRUE)
c
#       Mean and Media
mean(meanstepsNew$x,na.rm=TRUE)
median(meanstepsNew$x,na.rm=TRUE)
#       mean remains unchanged, median now matches mean
#       Total number of steps goes up?
sum(activityNew$steps)-sum(activity$steps, na.rm=TRUE)
```
install.packages("plyr")
activity<-read.csv("activity.csv")
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
meansteps<-aggregate(activity$steps,list(activity$date),sum)
a<-ggplot(meansteps,aes(meansteps$x))   +
geom_histogram(na.rm=TRUE)
a
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
install.packages("colorspace"")
install.packages("colorspace")
install.packages("colorspace")
library("ggplot2")
meansteps<-aggregate(activity$steps,list(activity$date),sum)
a<-ggplot(meansteps,aes(meansteps$x))   +
geom_histogram(na.rm=TRUE)
a
mean(meansteps$x,na.rm=TRUE)
median(meansteps$x,na.rm=TRUE)
meanint<-aggregate(activity$steps,list(activity$interval),mean,na.rm=TRUE)
#       head(meanint)
b<-ggplot(meanint,aes(x=meanint$Group.1,y=meanint$x))   +
geom_line()
b
#       Max Value
meanint[meanint$x==max(meanint$x),1]
sum(is.na(activity$steps))
#       Replace NA Values with average for that time
install.packages("plyr")
library("plyr")
activityNew<-activity
NAs<-is.na(activityNew$steps)
avg<-tapply(activityNew$steps, activityNew$interval,mean,
na.rm=TRUE, simplify = TRUE)
activityNew$steps[NAs]<-avg[as.character(activityNew$interval[NAs])]
install.packages("plyr")
install.packages("plyr")
sum(is.na(activity$steps))
activityNew<-activity
NAs<-is.na(activityNew$steps)
avg<-tapply(activityNew$steps, activityNew$interval,mean,
na.rm=TRUE, simplify = TRUE)
activityNew$steps[NAs]<-avg[as.character(activityNew$interval[NAs])]
sum(is.na(activityNew$steps))
meanstepsNew<-aggregate(activityNew$steps,list(activity$date),sum)
c<-ggplot(meanstepsNew,aes(meanstepsNew$x))   +
geom_histogram(na.rm=TRUE)
c
library("ggpolot2")
library("ggplot2")
meanstepsNew<-aggregate(activityNew$steps,list(activity$date),sum)
c<-ggplot(meanstepsNew,aes(meanstepsNew$x))   +
geom_histogram(na.rm=TRUE)
c
mean(meanstepsNew$x,na.rm=TRUE)
median(meanstepsNew$x,na.rm=TRUE)
sum(activityNew$steps)-sum(activity$steps, na.rm=TRUE)
head(activity)
?weekdays
weekdays(activity$date)
weekdays(activity$date[2])
weekdays(as.charachter(activity$date[2]))
weekdays(as.character(activity$date[2]))
weekdays(as.character(activity$date[2]))
weekdays(as.date(activity$date[2]))
weekdays(as.Date(activity$date[2]))
weekdays(as.Date(activity$daTe))
weekdays(as.Date(activity$date))
activitytW$weekday<-ifelse(weekdays(as.Date(activity$date))=="Saturday"|"Sunday", "Weekend", "Weekday")
activitytW$weekday<-ifelse(weekdays(as.Date(activity$date))="Saturday"|"Sunday", "Weekend", "Weekday")
activitytW$weekday<-weekdays(as.Date(activity$date)
)
activityW<-activity
activitytW$weekday<-weekdays(as.Date(activity$date))
activityW$weekday<-weekdays(as.Date(activity$date))
activityW$weekday<-ifelse(weekdays(as.Date(activity$date))=="Saturday"|"Sunday", "Weekend", "Weekday")
activityW$weekday<-weekdays(as.Date(activity$date))
head(activityW)
activityW$weekday<-ifelse(as.character(weekdays(as.Date(activity$date)))=="Saturday"|"Sunday", "Weekend", "Weekday")
activityW$weekday<-ifelse(activity$weekday)=="Saturday"|"Sunday", "Weekend", "Weekday")
activityW$weekday<-ifelse(activity$weekday=="Saturday"|"Sunday", "Weekend", "Weekday")
activityW$weekday<-ifelse(activity$weekday=="Saturday"|activity$weekday=="Sunday", "Weekend", "Weekday")
head(activityW)
activityW$weekday<-ifelse(as.character(activity$weekday)=="Saturday"|as.character(activity$weekday)=="Sunday", "Weekend", "Weekday")
head(activityW)
activityW$weekday<-ifelse(as.character(activity$weekday)=="Saturday"|as.character(activity$weekday)=="Sunday", "Weekend", "Weekday")
activityW$weekday<-ifelse(as.character(activity$weekday)==as.character("Saturday")|as.character(activity$weekday)=="Sunday", "Weekend", "Weekday")
activityW[activityW$weekday=="Sunday"]
activityW[activityW$weekday==1]
activityW[,activityW$weekday==1]
activityW[activityW$weekday==1,]
activityW$weekday<-ifelse(as.character(activityW$weekday)==as.character("Saturday")|as.character(activityW$weekday)=="Sunday", "Weekend", "Weekday")
head(activityW)
meanintW<-aggregate(activityW$steps,list(activityW$interval),mean,na.rm=TRUE)
#       head(meanintW)
head(meanintW)
meanintW <- activityW %>%
group_by(interval, weekday) %>%
summarise(steps = mean(steps),na.rm=TRUE)
library("dplyr")
meanintW <- activityW %>%
group_by(interval, weekday) %>%
summarise(steps = mean(steps),na.rm=TRUE)
meanintW
meanintW <- activityW %>%
group_by(interval, weekday) %>%
summarise(steps = mean(steps))
d<-ggplot(meanintW,aes(x=meanintW$interval,y=meanintW$steps))   +
geom_line()
d
activityW<-activityNew
activityW$weekday<-weekdays(as.Date(activity$date))
activityW$weekday<-ifelse(as.character(activityW$weekday)==as.character("Saturday")|as.character(activityW$weekday)=="Sunday", "Weekend", "Weekday")
meanintW <- activityW %>%
group_by(interval, weekday) %>%
summarise(steps = mean(steps))
meanintW
d<-ggplot(meanintW,aes(x=meanintW$interval,y=meanintW$steps))   +
geom_line()
d
d<-ggplot(meanintW,aes(x=meanintW$interval,y=meanintW$steps))   +
geom_line() +
facet_wrap(~weekday)
d
d<-ggplot(meanintW,aes(x=meanintW$interval,y=meanintW$steps))   +
geom_line() +
facet_wrap(~weekday,ncol=1,nrow=2)
d
d<-ggplot(meanintW,aes(x=meanintW$interval,y=meanintW$steps, color=weekday))   +
geom_line() +
facet_wrap(~weekday,ncol=1,nrow=2)
d
head(meanintW)
d<-ggplot(meanintW,aes(x=interval,y=Steps, color=weekday))   +
geom_line() +
facet_wrap(~weekday,ncol=1,nrow=2)
d
d<-ggplot(meanintW,aes(x=interval,y=steps, color=weekday))   +
geom_line() +
facet_wrap(~weekday,ncol=1,nrow=2)
d
knit2html()
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Show any code that is needed to
Load the data (i.e. read.csv())
Process/transform the data (if necessary) into a format suitable for your analysis
```{r, echo=TRUE}
#       getwd()
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
activity<-read.csv("activity.csv")
#       head(activity)
#       str(activity$steps)
```
## What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
Calculate the total number of steps taken per day
If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
Calculate and report the mean and median of the total number of steps taken per day
install.packages("ggplot2")
install.packages("colorspace")
```{r, echo=TRUE}
#   library("ggplot2")
meansteps<-aggregate(activity$steps,list(activity$date),sum)
#       head(meansteps)
#       Plot
```{r, echo=TRUE}
a<-ggplot(meansteps,aes(meansteps$x))   +
geom_histogram(na.rm=TRUE)
a
#       Mean and Media
mean(meansteps$x,na.rm=TRUE)
median(meansteps$x,na.rm=TRUE)
```
## What is the average daily activity pattern?
Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE}
meanint<-aggregate(activity$steps,list(activity$interval),mean,na.rm=TRUE)
#       head(meanint)
b<-ggplot(meanint,aes(x=meanint$Group.1,y=meanint$x))   +
geom_line()
b
#       Max Value
meanint[meanint$x==max(meanint$x),1]
```
## Imputing missing values
#   Strategy used replaces NAs with the average for that time interval
#   across observed period
Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
Create a new dataset that is equal to the original dataset but with the missing data filled in.
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r, echo=TRUE}
#       Count NAs
sum(is.na(activity$steps))
#       Replace NA Values with average for that time
install.packages("plyr")
library("plyr")
library("ggplot2")
activityNew<-activity
NAs<-is.na(activityNew$steps)
avg<-tapply(activityNew$steps, activityNew$interval,mean,
na.rm=TRUE, simplify = TRUE)
activityNew$steps[NAs]<-avg[as.character(activityNew$interval[NAs])]
#       Double check NAs removed
sum(is.na(activityNew$steps))
#       Histogram
meanstepsNew<-aggregate(activityNew$steps,list(activity$date),sum)
c<-ggplot(meanstepsNew,aes(meanstepsNew$x))   +
geom_histogram(na.rm=TRUE)
c
#       Mean and Media
mean(meanstepsNew$x,na.rm=TRUE)
median(meanstepsNew$x,na.rm=TRUE)
#       mean remains unchanged, median now matches mean
#       Total number of steps goes up?
sum(activityNew$steps)-sum(activity$steps, na.rm=TRUE)
```
## Are there differences in activity patterns between weekdays and weekends
For this part the weekdays() function may be of some help here. Use the dataset with the filled-in missing values for this part.
Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
```{r,echo=TRUE}
library("dplyr")
activityW<-activityNew
activityW$weekday<-weekdays(as.Date(activity$date))
activityW$weekday<-ifelse(as.character(activityW$weekday)==as.character("Saturday")|as.character(activityW$weekday)=="Sunday", "Weekend", "Weekday")
meanintW <- activityW %>%
group_by(interval, weekday) %>%
summarise(steps = mean(steps))
head(meanintW)
d<-ggplot(meanintW,aes(x=interval,y=steps, color=weekday))   +
geom_line() +
facet_wrap(~weekday,ncol=1,nrow=2)
d
```
From the chart it looks looks like weekdays start with more steps consistently early on in morning, until weekend appears more active over rest of the day, which seems consistent with the idea of people going to work in the morning, waking up later on weekends, whilst also having a less active day in offices.
install.packages("ggplot2")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Show any code that is needed to
Load the data (i.e. read.csv())
Process/transform the data (if necessary) into a format suitable for your analysis
```{r, echo=TRUE}
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
activity<-read.csv("activity.csv")
opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
knitr()
install.packages("knitr")
knit2html()
library("knitr")
knit2html()
?knit2html()
knit2html(
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
#   install.packages("knitr")
## Loading and preprocessing the data
Show any code that is needed to
Load the data (i.e. read.csv())
Process/transform the data (if necessary) into a format suitable for your analysis
```{r, echo=TRUE}
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
activity<-read.csv("activity.csv")
head(activity)
```
## What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
Calculate the total number of steps taken per day
If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
Calculate and report the mean and median of the total number of steps taken per day
library("ggplot2")
```{r, echo=TRUE}
meansteps<-aggregate(activity$steps,list(activity$date),sum)
```
Plot
```{r, echo=TRUE}
a<-ggplot(meansteps,aes(meansteps$x))   +
geom_histogram(na.rm=TRUE)
a
```
Mean and Median
```{r, echo=TRUE}
mean(meansteps$x,na.rm=TRUE)
median(meansteps$x,na.rm=TRUE)
```
## What is the average daily activity pattern?
Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE}
meanint<-aggregate(activity$steps,list(activity$interval),mean,na.rm=TRUE)
#       head(meanint)
b<-ggplot(meanint,aes(x=meanint$Group.1,y=meanint$x))   +
geom_line()
b
#       Max Value
meanint[meanint$x==max(meanint$x),1]
```
## Imputing missing values
#   Strategy used replaces NAs with the average for that time interval
#   across observed period
Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
Create a new dataset that is equal to the original dataset but with the missing data filled in.
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r, echo=TRUE}
#       Count NAs
sum(is.na(activity$steps))
#       Replace NA Values with average for that time
install.packages("plyr")
library("plyr")
library("ggplot2")
activityNew<-activity
NAs<-is.na(activityNew$steps)
avg<-tapply(activityNew$steps, activityNew$interval,mean,
na.rm=TRUE, simplify = TRUE)
activityNew$steps[NAs]<-avg[as.character(activityNew$interval[NAs])]
#       Double check NAs removed
sum(is.na(activityNew$steps))
#       Histogram
meanstepsNew<-aggregate(activityNew$steps,list(activity$date),sum)
c<-ggplot(meanstepsNew,aes(meanstepsNew$x))   +
geom_histogram(na.rm=TRUE)
c
#       Mean and Media
mean(meanstepsNew$x,na.rm=TRUE)
median(meanstepsNew$x,na.rm=TRUE)
#       mean remains unchanged, median now matches mean
#       Total number of steps goes up?
sum(activityNew$steps)-sum(activity$steps, na.rm=TRUE)
```
## Are there differences in activity patterns between weekdays and weekends
For this part the weekdays() function may be of some help here. Use the dataset with the filled-in missing values for this part.
Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
```{r,echo=TRUE}
library("dplyr")
activityW<-activityNew
activityW$weekday<-weekdays(as.Date(activity$date))
activityW$weekday<-ifelse(as.character(activityW$weekday)==as.character("Saturday")|as.character(activityW$weekday)=="Sunday", "Weekend", "Weekday")
meanintW <- activityW %>%
group_by(interval, weekday) %>%
summarise(steps = mean(steps))
head(meanintW)
d<-ggplot(meanintW,aes(x=interval,y=steps, color=weekday))   +
geom_line() +
facet_wrap(~weekday,ncol=1,nrow=2)
d
```
From the chart it looks looks like weekdays start with more steps consistently early on in morning, until weekend appears more active over rest of the day, which seems consistent with the idea of people going to work in the morning, waking up later on weekends, whilst also having a less active day in offices.
)
install.packages("plyr")
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1/Activity")
getwd()
setwd("~/.")
---
getwd()
getwd()
setwd("~/R/Coursera Data Science/Rep Research/RepData_PeerAssessment1")
getwd()
activity<-read.csv("./activity.csv")
source('~/.active-rstudio-document', echo=TRUE)
activity<-read.csv("~/activity/activity.csv")
activity<-read.csv("./activity.csv")
